package models;

public class Vulnerability {
    public Cve cve;

    public double getBaseScore() {
        return this.cve.metrics.cvssMetricV2.get(0).cvssData.baseScore;
    }

    public double getImpactScore() {
        return this.cve.metrics.cvssMetricV2.get(0).impactScore;
    }

    public double getExploitabilityScore() {
        return this.cve.metrics.cvssMetricV2.get(0).exploitabilityScore;
    }

    public String getCveId() {
        return this.cve.id;
    }

    // For Insetion Sort
    public int compareTo(Vulnerability element) {
        int res = 0;
        if (this.getBaseScore() < element.getBaseScore()) {
            res = -1;
        } else if (this.getBaseScore() == element.getBaseScore()) {

            if (this.getImpactScore() < element.getImpactScore())
                res = -1;
            else if (this.getImpactScore() == element.getImpactScore()) {
                if (this.getExploitabilityScore() < element.getExploitabilityScore())
                    res = -1;
                else if (this.getExploitabilityScore() == element.getExploitabilityScore()) {
                    String[] idArrayLeft = this.getCveId().split("-");
                    String[] idArrayRight = element.getCveId().split("-");

                    int idLeft = Integer.parseInt((idArrayLeft[1] + idArrayLeft[2]));
                    int idRight = Integer.parseInt((idArrayRight[1] + idArrayRight[2]));

                    if (idLeft > idRight)
                        res = -1;
                    else {
                        res = 1;
                    }
                } else {
                    res = 1;
                }
            } else {
                res = 1;
            }
        }
        if (this.getBaseScore() > element.getBaseScore()) {
            res = 1;
        }
        return res;
    }
}
